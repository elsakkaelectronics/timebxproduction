generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image         String?
  accounts      Account[]
  sessions      Session[]
  memberships   Membership[]
  plans         Plan[]    @relation("UserPlans")
  createdAt     DateTime  @default(now())
}

model Workspace {
  id          String        @id @default(cuid())
  name        String
  stripeId    String?       @unique
  plan        SubscriptionPlan @default(FREE)
  members     Membership[]
  plans       Plan[]
  createdAt   DateTime      @default(now())
}

enum Role {
  OWNER
  ADMIN
  MEMBER
}

enum SubscriptionPlan {
  FREE
  PRO
}

model Membership {
  id           String    @id @default(cuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  role         Role      @default(MEMBER)
  createdAt    DateTime  @default(now())
  @@unique([userId, workspaceId])
}

model Plan {
  id           String   @id @default(cuid())
  title        String
  dayStart     DateTime
  workspace    Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId  String
  owner        User      @relation("UserPlans", fields: [ownerId], references: [id])
  ownerId      String
  tasks        Task[]
  createdAt    DateTime @default(now())
}

model Task {
  id        String   @id @default(cuid())
  title     String
  minutes   Int      @default(25)
  color     String   @default("#6366f1")
  done      Boolean  @default(false)
  plan      Plan     @relation(fields: [planId], references: [id])
  planId    String
  order     Int      @default(0)
  createdAt DateTime @default(now())
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}